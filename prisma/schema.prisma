generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  image        String?
  bio          String?
  role         Role          @default(USER)
  status       UserStatus    @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  comments     Comment[]
  likes        Like[]
  posts        Post[]
  userSettings UserSettings?
}

model Post {
  id            String    @id @default(uuid())
  title         String
  slug          String    @unique
  content       String
  excerpt       String?
  published     Boolean   @default(false)
  featuredImage String?
  readTime      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  authorId      String
  categoryId    String
  comments      Comment[]
  likes         Like[]
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Category      Category  @relation(fields: [categoryId], references: [id])
  Tag           Tag[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  parentId  String?
  blocked   Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}

model Category {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique
  Post Post[]
}

model Tag {
  id   String @id @default(uuid())
  name String @unique
  slug String @unique
  Post Post[]
}

model UserSettings {
  id                 String  @id @default(uuid())
  userId             String  @unique
  theme              String  @default("light")
  emailNotifications Boolean @default(true)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
}
